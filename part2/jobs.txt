The database migration and seeding were split into two separate jobs; hence, two separate yaml files were created.
  1. db-part-two-migrate.yaml for migrations
  2. db-part-two-seed.yaml for seeding 
  
The sql code used in both yaml files were part of the "setup.sql" file.
However, the migrations and seeding actions were split into two separate sql files:
  1. migrate.sql for migrations
  2. seed.sql for seeding
Note that both sql files were included in the "db/Dockerfile" to be copied over with the "COPY" command. 
These two sql files are now available to be called by their respective yaml files because it is now 'locally' available to it.

The job of migration and seeding can now be performed from the command line with these commands:
-> kubectl apply -f db/k8/db-part-two-migrate.yaml
-> kubectl apply -f db/k8/db-part-two-seed.yaml

Please note that within each of the yaml files from above: db-part-two-migrate.yaml and db-part-two-seed.yaml, respectively, are these commands:
-> command: ["mysqld",  "/migrate.sql"]
-> command: ["mysqld",  "/seed.sql"]
If specific migrations are needed, then developers can edit 'migrate.sql' directly.

Edits: For best practices to do Django migrations, we can use the Django image and call the migrate command like below:
-> python manage.py makemigrations nyuappsec/assign3-db:v0
-> python manage.py makemigrations
-> python manage.py migrate
